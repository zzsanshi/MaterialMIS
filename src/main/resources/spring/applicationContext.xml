<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
 http://www.springframework.org/schema/cache https://www.springframework.org/schema/cache/spring-cache.xsd
">

    <import resource="classpath:spring/spring-mybatis.xml" />
    <import resource="classpath:spring/spring-tx.xml"/>

<!--    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
<!--        <property name="locations"> &lt;!&ndash; PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件 &ndash;&gt;-->
<!--            <array>-->
<!--                <value>classpath:property/redis.properties</value>-->
<!--                <value>classpath:property/redis.properties</value>-->
<!--            </array>-->
<!--        </property>-->
<!--    </bean>-->

    <!--开启spring注解，扫描spring注解所在的包 -->
    <!--希望处理service和dao，controller不需要Spring框架去处理-->
    <context:component-scan base-package="com.project">
        <!--配置哪些注解不扫描-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
<!--    启用注解-->
    <cache:annotation-driven  cache-manager="redisCacheManager" key-generator="keyGenerator"/>

    <bean id="keyGenerator" class="com.project.cache.KeyGeneratorDemo"></bean>

<!--        第三方缓存-->
    <context:property-placeholder location="classpath:property/redis.properties"  />
    <!--配置Redis池子-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.pool.maxIdle}"/>
        <property name="maxTotal" value="${redis.pool.maxActive}"/>
        <property name="maxWaitMillis" value="${redis.pool.maxWait}"/>
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>

    </bean>
    <!--生产Redis连接的工程-->
    <!-- 连接池配置，类似数据库连接池 -->
    <!-- redis单机配置，地址等在这配置 2.0以上的新特性 -->
    <bean  id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="password" value="${redis.password}"/>
        <!-- 超时时间 默认2000-->
        <property name="timeout" value="${redis.timeout}" />

<!--        <property name="database" value="${redis.dbIndex}"/>-->
        <!-- 连接池配置引用 -->
        <property name="poolConfig" ref="jedisPoolConfig" />
        <!-- usePool：是否使用连接池 -->
        <property name="usePool" value="${redis.usePool}"/>
<!--        <property name="database" value="${redis.database}"/>-->
    </bean>

    <!--序列化方式-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <!--关联链接工厂-->
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="enableTransactionSupport" value="false"/><!--事务支持,默认关闭-->
        <property name="exposeConnection" value="false"/><!--显示链接数,默认关闭-->
        <property name="enableDefaultSerializer" value="true" /><!--序列化器,默认启动-->
        <!--指定k/v 的序列化-->
        <property name="keySerializer" >
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <property name="hashKeySerializer" >
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
    </bean>


    <!--注册一个缓存管理者 可以使用缓存抽象提供的注解操作缓存-->
    <bean name="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <!--要在类或方法的注解的value(cacheNames)中使用 表示一个cache的名称-->
<!--        <constructor-arg name="cacheWriter" value="connectionFactory"/>-->
<!--        <constructor-arg name="content" value="defaultCache"/>-->
<!--        是否缓存null-->
<!--        <constructor-arg name="cacheNullValues" value="false"/>-->
        <!--注入redisTemplate-->
        <constructor-arg name="redisOperations" ref="redisTemplate"/>
        <property name="defaultExpiration" value="10"/>
    </bean>
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" p:maxUploadSize="500000"/>




</beans>
